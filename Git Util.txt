####WORKFLOW'S

###FEATURE BRANCH DEVELOPMENT -> MODELO DE TRABALHO

https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow

###TAGS

https://git-scm.com/book/en/v2/Git-Basics-Tagging
https://semver.org/

####WORKFLOW'S XXXX

####COMMANDS
clear -> limpa a janela 

*git init -> starta repositorio

*git status -> ver o status do rep / modificações 

*git log -> mostrar a "imagem do repositorio " "foto "

*git log --grep "teste" -> Procurar em especifico um arquivo conforme contexto da palavra escrita

HASH DA FOTO: ( atravez do *git log )

''
commit 37f43bb09dd580f962871db192581df4e98def63 -> hash 
''

*git checkout 37f43bb09dd580f962871db192581df4e98def63 -> volto a foto pra ca ignorando modificações prévias

*git checkout master -> voltar pra master 

*git branch -> mostra todas as branch ( ramificações ) 

*git checkout -b feat/atts -> nova branch de features: atualizações 

Ir pra nova branch e baixar a imagem no local ***

*git chechout "feat/atts"

*git push origin "feat/atts"

Ir pra nova branch e baixar a imagem no local ***

00**Apagar a branch antiga apos att 

*git branch -d "feat/atts"

00**Apagar a branch antiga apos att 

00**Fazer merge 

*git checkout master -> mudar pra principal 

*git merge "feat/teste-apaga" -> fazer o merge com essa branch

00**Fazer merge

// SHOW //

*git show "hash" -> mostra as mudanças naquele commit

*git add "arquivo_escolhido" -> add o arquivo  que pedir 

*git add . -> todos os arquivos do rep

*git commit -m "" -> definir a mensagem "m" da versao / commit 
** "-a" -> adiciona ja o arquivo direto no commit

*git whatchanged -> mostra tudo q mudou des da ultima att

*git push -> subir pro endereço definido 

// REMOTE //

*git remote add origin "" -> definir o repositorio salvo no Github 

*git remote set-url origin ""-> setar o repositorio

*git remote -v -> mostra as origins 

///////////

*git push --set-upstream origin master -> subir pra branch MASTER

*git reflog -> historico de modificações 

*git reset --hard (ID) -> voltar um commit especifico na maquina local 

*git branch -> mostrar as branch disponiveis

*git branch (nome) -> criar nova branch // "staging" é utilizado regularmente para nomear as branch's de teste 

*git checkout (nome branch) -> mudar de branch 

*git merge (nome da branch com os commit's desejados) -> faz o processo de merge da branch desejada para a atual

*git pull -> puxar as ultimas commits feitas na branch 

*git checkout -b (nome da nova branch) (nome da branch usada de referência) -> cria uma branch e ja muda para ela 

*touch .gitignore -> cria o arquivo gitignore, depois só entrar no mesmo e escrever o nome dos aquivos e extenção ou pastas seguidos de "/" que não devem ser enviados.

// TAG //	

*git tag -> ver as tags existentes 

*git fetch --tags -> puxar a tag do github 

///////////



// MERGE // 

Procedimento padrão para adicionar commit's de uma branch para outra:

1 - Entrar na branch master (ou a desejada) 

2 - git pull -> puxar as ultimas commits feitas na branch 

3 - git merge (nome da branch com os commit's desejados) -> faz o processo de merge da branch desejada para a atual 

4 - git push -> para subir as alterações 

///////////


// PADRÃO DE MERCADO // 

1 - git pull -> da branch principal 

2 - Gerar uma nova branch a partir da branch principal 

3 - Trabalhar e adicionar novas funcionalidades da nova branch que criou 

4 - Finalizar o Trabalho na branch temporária 

5 - git checkout -> na branch principal 
*** adicionando um "-b" e "nome-branc" ja cria 

6 - git pull -> puxar os ultimos commits 

7 - git merge (nome da branch com os commit's desejados) -> Mergiar (unir) o código da branch temporário com a branch principal(depois de testar)

8 - git push -> sobe o commit pro repositorio na nuvem
**pode adicionar o: --force -> ( força subir de qualquer maneira ( pode quebrar p/ tdos ) 
**** usar o reflog pra tentar arrumar cada repositorio / commit que foi alterado
****** pode fazer o protect pelo github para anular o uso do force
///////////


// PULL REQUEST (Merge Democrático) // 

1 - git push -> mandar todas as atualizações para nuvem 

2 - Entrar no repositório do Github 

3 - teste-pratica-mercado had recent pushes 1 minute ago -> clicar em "compare & pull request"

4 - selecionar o merge e o destino 

5 - Comentar as atualizações 

6 - Verificar as revisão de outros dev's e se necessário criar nova commit com as correções comentadas marcando os dev's




// RESET //

*git reset --hard "" -> ele volta para o commit anterior selecionado definindo o ultimo commit inserindo a hash do commit desejado.

*git cherry-pick "" -> traz de volta um commit apagado que ainda esta na maquina usando o hash do historico do reflog do mesmo no '""'

/////////////


####COMMANDS XXXX

####ESTHETICS

####ESTHETICS XXXX

####INFORMAÇÕES




///HOOKS -> São paramentos especificos para serem definidos antes do commit 
 
///REFLOG -> Referencias de logs com informações de como as coisas foram feitas 
 
*git reflog -> mostra todas as alterações 
 
*git reflog --grep-reflog "exemplo" -> pesquisa nos commits a palavra escrita 
 
///BISECT -> ele busca commits que tenham coisas em comum ou relacionadas no meio de varios para achar bugs por exemplo
**entra em uma listagem pra ir excluindo de 1 em 1 os "bad" para achar o erro ou "good"
***além dos commits da pra fazer por versionamento 

*git tag -> ver os tags "versionamentos" do projeto 

*git bisect start -> inicia e fica esperando o commit antes do erro e o depois ( bom e ruim )

*git bisect bad "" -> se n colocar o hash ele assume que é o commit atual 
 
*git bisect good "" -> indica o commit sem o erro 

*git bisect reset -> encerrar as buscas 
 
--> apos algumas referencias "good" e "bad" ele mostra qual commit introduziu o erro...

*git log --oneline -> mostrar logs em 1 linha 

///REBASE -> LOCALMENTE  
***tem uma tela unica no console / tem que escolher a maneira de fazer o rebase conforme os comandos disponiveis 
**** pode ser usado para a gestão dos commits 
Squash and Merge -> juntando dois commit em 1 

*git diff "main" -> mostra a diferença das branch / commits 

*git rebase "master" "topic" -> une tudo atualizado da master para a topic como um merge 

*git rebase -i "main" ->diferença da branch atual baseada na main

*git rebase "nome-da-branch" -> ja uni os commits e da merge

*git commit --amend -> juntar os arquivos com o ultimo commit

// CONFLITO DE MERGE / EDIÇÕES / COMMITS 

*Usar o rebase para arrumar manualmente no console os proprios comandos e depois inserir o comando:

*git rebase --continue ou --abort -> fazer o rebase com o continue e desistir com o abort 

/// MERGE X REBASE ///
***uso de cada particular porém o merge pode "poluir" o historico do repositório 


####INFORMAÇÕES XXXX